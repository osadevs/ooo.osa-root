<?xml version="1.0" encoding="UTF-8"?>
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--> 
<!--                Open Simulation Architecture (OSA)                  -->
<!--                                                                    -->
<!--      This software is distributed under the terms of the           -->
<!--           CECILL-C FREE SOFTWARE LICENSE AGREEMENT                 -->
<!--  (see http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html) -->
<!--                                                                    -->
<!--  Copyright © 2006-2015 Université Nice Sophia Antipolis            -->
<!--  Contact author: Olivier Dalle (olivier.dalle@unice.fr)            -->
<!--                                                                    -->
<!--  Parts of this software development were supported and hosted by   -->
<!--  INRIA from 2006 to 2015, in the context of the common research    -->
<!--  teams of INRIA and I3S, UMR CNRS 7172 (MASCOTTE, COATI, OASIS and -->
<!--  SCALE).                                                           -->
<!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++--> 
<project xmlns="http://maven.apache.org/POM/4.0.0" 
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
		 
	<modelVersion>4.0.0</modelVersion>
	

	<groupId>org.osadev.osa</groupId>
	<artifactId>osa-root</artifactId>
	<version>0.8.0-SNAPSHOT</version>
	<name>OSA root</name>

	<packaging>pom</packaging>
	
	<description>OSA stands for Open Simulation Architecture.
	
		OSA is primarily intended to be a federating platform for the simulation community: it is designed to favour
		the integration of new or existing contributions at every level of its architecture.

		The platform core supports discrete-event simulation engine(s) built on top of the ObjectWeb Consortium’s Fractal
		component model. In OSA, the systems to be simulated are modeled and instrumented using Fractal components.
		Fractal components offer many advanced and original features, such as multi-programming language support and
		the ability to share sub-components. In OSA, the event handling is mostly hidden in the controller part of the components,
		which alleviates noticeably the modeling process, but also ease the replacement of any part of the simulation engine.
		Apart the simulation engine, OSA aims at integrating useful tools for modeling, developing, experimenting and analysing simulations.
	</description>
	
	
	<!-- NEW since version 0.8.X:                   -->
	<!-- * Moved scm to git@github                  -->
	<!-- * Changed web url to osadev.org            -->
	<!-- * Changed group id and package prefix to org.osadev.osa (ooo) -->
	
	<url>http://www.osadev.org/</url>
	
	<organization>
		<name>Université Nice Sophia Antipolis</name>
		<url>http://www.unice.fr/</url>
	</organization>
		
	<properties>
		<!-- Javadoc location properties -->
		<fractal.url>http://fractal.ow2.org/current/doc/javadoc/fractal/</fractal.url>
		<asm.url>http://asm.ow2.org/asm30/javadoc/user/</asm.url>
		<jdk.url>http://docs.oracle.com/javase/1.5.0/docs/api/</jdk.url>
		<dot.executable.path>/opt/local/bin/dot</dot.executable.path>
		
		
		<!-- project directory name  -->
		<location>ooo.${project.artifactId}</location>
		
		<!-- scm location config: keep as is -->
		<scm.url>osadevs/${location}.git</scm.url>
		<scm.reg.url>scm:git:git://github.com/${scm.url}</scm.reg.url>
		<scm.dev.url>scm:git:git@github.com:${scm.url}</scm.dev.url>
		
		<!-- OSA has its own deployement server with maven repo and web site -->
		<dev.repo.id>osadev.deployment</dev.repo.id>
		<dev.repo.name>OSA Dev Repository</dev.repo.name>
		<dev.repo.url.up>http://mvn.osadev.org:8081/content/repositories</dev.repo.url.up>
		
		<!-- OSA has its own plugin maven repo. Artifacts are manually uploaded. -->
		<plugin.repo.id>plugin.deployment</plugin.repo.id>
		<plugin.repo.name>OSA Plugin Repository</plugin.repo.name>
		<plugin.repo.url.down>http://mvn.osadev.org:8081/content/repositories/plugins</plugin.repo.url.down>
		
		<!-- Starting OSA v0.7 the whole web-site is versioned, except the web-site
			root. -->
		<!-- The web-site root is handled as a separate dependency with id f.i.o.wwwroot. -->
		<website.id>osawebsite</website.id>
		<website.url.up>scp://osa.inria.fr/var/osa_website/0.8/</website.url.up>
		<website.rooturl>http://www.osadev.org/0.8/</website.rooturl>
		
		<version.base>0.8</version.base>
		
		<site.stage.dir>/tmp/osaweb/${version.base}/</site.stage.dir>
	</properties>
  	
	<scm>
		<url>https://github.com/${scm.url}</url>
		<connection>${scm.reg.url}</connection>
		<developerConnection>${scm.dev.url}</developerConnection>
  	</scm>
  	
  	<licenses>
		<license>
			<name>CeCILL-C</name>
			<comments>French equivalent to LGPL</comments>
			<url>http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	
	<distributionManagement>
		<repository>
     		<id>osadev.releases</id>
     		<name>Internal Releases</name>
     		<url>${dev.repo.url.up}/osadev-releases</url>
  		</repository>
  		<snapshotRepository>
     		<id>osadev.snapshots</id>
     		<name>Internal Releases</name>
     		<url>${dev.repo.url.up}/osadev-snapshots</url>
  		</snapshotRepository>
		<site>
			<id>${website.id}</id>
			<url>${website.url.up}</url>
		</site>
	</distributionManagement>

	
	<repositories>
		<!-- OSA repository -->
		<repository>
     		<id>osadev.releases</id>
     		<name>Internal Releases</name>
     		<url>${dev.repo.url.up}/osadev-releases</url>
     		<releases>
     			<enabled>true</enabled>
     			<updatePolicy>always</updatePolicy>
     		</releases>
  		</repository>
  		<repository>
     		<id>osadev.snapshots</id>
     		<name>Internal Releases</name>
     		<url>${dev.repo.url.up}/osadev-snapshots</url>
     		<snapshots>
     			<enabled>true</enabled>
     			<updatePolicy>always</updatePolicy>
     		</snapshots>
  		</repository>

		<!-- Fractal dependencies hosted by OW2 -->
		<repository>
			<id>objectweb-repo-legacy</id>
			<name>ObjectWeb Repository</name>
			<url>http://repository.ow2.org/nexus/content/repositories/ow2-legacy/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
		<repository>
			<id>objectweb-repo-release</id>
			<name>ObjectWeb Repository</name>
			<url>http://repository.ow2.org/nexus/content/repositories/releases/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
		<repository>
			<id>objectweb-snapshot-repo</id>
			<name>ObjectWeb Snapshot Repository</name>
			<url>http://repository.ow2.org/nexus/content/repositories/snapshots/</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>
	
	<!-- OSA runs its own plugin repository to ensure availability of some third-party artifacts -->
	<pluginRepositories>
		<pluginRepository>
			<id>${plugin.repo.id}</id>
			<url>${plugin.repo.url.down}</url>
			<name>${plugin.repo.name}</name>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<profiles>
		<!-- This is a hack to fix maven bugs when using a flat multi-module structure -->
		<!-- The idea is to automagically symlink the submodules withing the root module -->
		<!-- The profile is automatically activated when a link is missing. --> 
		<!-- By default this profile runs the exec:exec goal which runs a python script. -->
		<!-- FIXME: UNTESTED in windows environment. -->
		<profile>
			<id>modules.missing</id>
			<activation>
				<file>
					<!-- Only check one to keep it simple and easy to maintain. -->
					<missing>ooo.maven-config</missing>
				</file>
			</activation>
		
			<build>
				<defaultGoal>exec:exec</defaultGoal>
		
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.4.0</version>
		
						<executions>
							<execution>
								<id>site</id>
								<goals>
									<goal>exec</goal>
								</goals>
								<phase>pre-site</phase>
								<inherited>false</inherited>
							</execution>
							<execution>
								<id>build</id>
								<goals>
									<goal>exec</goal>
								</goals>
								<phase>initialize</phase>
								<inherited>false</inherited>
							</execution>
						</executions>
						
						<configuration>
							<executable>python</executable>
							<goal>exec</goal>
							<arguments>
								<argument>src/python/symlink.py</argument>
								<argument>-c</argument>
							</arguments>
						</configuration>
						
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- End of the flat multimodule trick: only declare sub-modules once the symlinks are created. -->
		<profile>
			<id>modules.found</id>
			<activation>
				<file>
					<exists>ooo.maven-config</exists>
				</file>
			</activation>
			
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-clean-plugin</artifactId>
						<version>3.0.0</version>
						<configuration>
							<filesets>
								<fileset>
									<directory>./</directory>
									<includes>
										<include>ooo.maven-config</include>
									</includes>
									<followSymlinks>false</followSymlinks>
								</fileset>
								<fileset>
									<directory>${site.stage.dir}</directory>
									<followSymlinks>false</followSymlinks>
								</fileset>
							</filesets>
						</configuration>
					</plugin>
				</plugins>
			</build>

			<!-- Default list of modules -->
			<modules>
				<module>ooo.maven-config</module>
			</modules>	
		</profile>
		
	</profiles>
	
	<!-- DEFAULT profile -->
	<build>
		<defaultGoal>test</defaultGoal>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.4</version>
					<dependencies>
						<dependency> <!-- add support for ssh/scp -->
							<groupId>org.apache.maven.wagon</groupId>
							<artifactId>wagon-ssh</artifactId>
							<version>1.0</version>
						</dependency>
						<dependency>
							<groupId>org.apache.maven.doxia</groupId>
							<artifactId>doxia-module-docbook-simple</artifactId>
							<version>1.6</version>
						</dependency>
					</dependencies>
				</plugin>
				
				
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5.1</version>
				</plugin>
				
				<!-- See distribution management for artifact repo deployment -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.7</version>
				</plugin>
			</plugins>
		</pluginManagement>
	
		<plugins>
			<plugin>
				<artifactId>maven-site-plugin</artifactId>
				<configuration>
					<stagingDirectory>${site.stage.dir}</stagingDirectory>
					<locales>en</locales>
					<chmod>true</chmod>
					<inputEncoding>UTF-8</inputEncoding>
					<outputEncoding>UTF-8</outputEncoding>
				</configuration>
				
			</plugin>
		</plugins>
	</build>
	
	<modules>
		<!-- NO MODULE IN DEFAULT PROFILE -->
		<!-- Due to the flat subproject organization, submodules have to be symlinked first. -->
		<!-- See modules.missing and modules.found profiles. -->
		<!-- (New modules are declared at end of modules.found)-->
	</modules>

</project>